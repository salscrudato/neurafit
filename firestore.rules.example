rules_version = '2';

/**
 * Firestore Security Rules for NeuraFit
 * 
 * These rules provide server-side validation to complement client-side Zod validation.
 * They ensure data integrity even if client-side validation is bypassed.
 * 
 * IMPORTANT: Deploy these rules to Firebase Console or via Firebase CLI:
 * firebase deploy --only firestore:rules
 */

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    /**
     * Check if user is authenticated
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Check if user owns the document
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /**
     * Validate experience level
     */
    function isValidExperience(experience) {
      return experience in ['Beginner', 'Intermediate', 'Advanced'];
    }
    
    /**
     * Validate fitness goals
     */
    function isValidGoals(goals) {
      let validGoals = [
        'Weight Loss',
        'Build Muscle',
        'Strength',
        'Stamina',
        'Tone',
        'General Health',
        'Increase Flexibility',
        'Sports Performance',
        'Mental Health',
        'Injury Prevention'
      ];
      return goals.size() > 0 
        && goals.size() <= 10 
        && goals.hasAll(validGoals);
    }
    
    /**
     * Validate equipment
     */
    function isValidEquipment(equipment) {
      let validEquipment = [
        'Bodyweight',
        'Dumbbells',
        'Barbells',
        'Resistance Bands',
        'Kettlebells',
        'Medicine Balls',
        'Weight Machines',
        'Treadmill',
        'Stationary Bike',
        'Rowing Machine',
        'Pull-Up Bar',
        'Cable Machine',
        'None (Bodyweight)'
      ];
      return equipment.size() > 0 
        && equipment.size() <= 13 
        && equipment.hasAll(validEquipment);
    }
    
    /**
     * Validate personal information
     */
    function isValidPersonal(personal) {
      return personal.sex in ['Male', 'Female', 'Other', 'Prefer not to say']
        && personal.height is number
        && personal.height > 0
        && personal.height <= 300
        && personal.weight is number
        && personal.weight > 0
        && personal.weight <= 1000;
    }
    
    /**
     * Validate injuries
     */
    function isValidInjuries(injuries) {
      return injuries.list is list
        && injuries.list.size() <= 20
        && injuries.notes is string
        && injuries.notes.size() <= 1000;
    }
    
    /**
     * Validate user profile
     */
    function isValidUserProfile(data) {
      return data.keys().hasAll(['experience', 'goals', 'equipment', 'personal'])
        && isValidExperience(data.experience)
        && isValidGoals(data.goals)
        && isValidEquipment(data.equipment)
        && isValidPersonal(data.personal)
        && (!('injuries' in data) || isValidInjuries(data.injuries));
    }
    
    // ============================================================================
    // USER DOCUMENTS
    // ============================================================================
    
    /**
     * User profile documents
     * Path: /users/{userId}
     */
    match /users/{userId} {
      // Allow read if user owns the document
      allow read: if isOwner(userId);
      
      // Allow create if user is authenticated and creating their own document
      allow create: if isOwner(userId)
        && request.resource.data.uid == userId
        && request.resource.data.email is string
        && request.resource.data.email.size() > 0
        && request.resource.data.email.size() <= 255;
      
      // Allow update if user owns the document and data is valid
      allow update: if isOwner(userId)
        && (
          // Allow updating basic fields
          !request.resource.data.diff(resource.data).affectedKeys().hasAny(['experience', 'goals', 'equipment', 'personal'])
          // Or validate profile fields if they're being updated
          || isValidUserProfile(request.resource.data)
        );
      
      // Never allow delete (soft delete only)
      allow delete: if false;
      
      // ============================================================================
      // USER WORKOUTS SUBCOLLECTION
      // ============================================================================
      
      /**
       * User workout documents
       * Path: /users/{userId}/workouts/{workoutId}
       */
      match /workouts/{workoutId} {
        // Allow read if user owns the parent document
        allow read: if isOwner(userId);
        
        // Allow create if user owns the parent document and data is valid
        allow create: if isOwner(userId)
          && request.resource.data.timestamp != null
          && request.resource.data.duration is number
          && request.resource.data.duration > 0
          && request.resource.data.duration <= 7200  // Max 2 hours
          && request.resource.data.exercises is list
          && request.resource.data.exercises.size() > 0
          && request.resource.data.exercises.size() <= 50;  // Max 50 exercises
        
        // Allow update if user owns the parent document
        // (for adding feedback, RPE, etc.)
        allow update: if isOwner(userId)
          && request.resource.data.timestamp == resource.data.timestamp  // Can't change timestamp
          && request.resource.data.exercises == resource.data.exercises;  // Can't change exercises
        
        // Allow delete if user owns the parent document
        allow delete: if isOwner(userId);
      }
      
      // ============================================================================
      // USER SUBSCRIPTION SUBCOLLECTION
      // ============================================================================
      
      /**
       * User subscription documents
       * Path: /users/{userId}/subscription/{subscriptionId}
       */
      match /subscription/{subscriptionId} {
        // Allow read if user owns the parent document
        allow read: if isOwner(userId);
        
        // Only allow writes from server (Cloud Functions)
        allow write: if false;
      }
    }
    
    // ============================================================================
    // ADMIN COLLECTIONS (if needed)
    // ============================================================================
    
    /**
     * Admin-only collections
     * These should only be accessible by Cloud Functions or Admin SDK
     */
    match /admin/{document=**} {
      allow read, write: if false;
    }
    
    // ============================================================================
    // PUBLIC COLLECTIONS (if needed)
    // ============================================================================
    
    /**
     * Public read-only data (e.g., exercise library, templates)
     */
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}

