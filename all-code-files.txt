================================================================================
FILE: /Users/salscrudato/Projects/neurafit/package.json
================================================================================
{
  "name": "neurafit",
  "private": true,
  "version": "1.0.17",
  "type": "module",
  "description": "AI-powered fitness application with personalized workout generation",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0"
  },
  "packageManager": "npm@10.9.2",
  "scripts": {
    "// Development": "========================================",
    "predev": "node scripts/clear-all-caches.js",
    "dev": "vite",
    "dev:host": "vite --host",
    "dev:https": "vite --https",
    "// Building": "========================================",
    "prebuild": "node scripts/clear-all-caches.js && npm run update:manifest",
    "build": "node scripts/clear-all-caches.js && tsc -b && vite build && npm run build:sw && npm run build:check",
    "build:deploy": "node scripts/clear-all-caches.js && vite build && npm run build:sw",
    "build:sw": "node scripts/build-sw.js",
    "update:manifest": "node scripts/update-manifest-version.js",
    "build:analyze": "ANALYZE=true npm run build",
    "build:check": "node scripts/check-bundle-size.js",
    "clean:cache": "node scripts/clear-all-caches.js",
    "// Deployment": "========================================",
    "deploy": "npm run build && firebase deploy --only hosting",
    "deploy:all": "node scripts/deploy.js hosting,functions",
    "deploy:functions": "npm run build && firebase deploy --only functions",
    "deploy:rules": "firebase deploy --only firestore:rules",
    "// Code Quality": "========================================",
    "typecheck": "tsc -b --force",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "// Testing": "========================================",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest run --coverage",
    "// Preview": "========================================",
    "preview": "vite preview",
    "preview:sw": "vite preview --port 4173",
    "// Analysis": "========================================",
    "analyze": "vite-bundle-visualizer",
    "analyze:build": "npm run build:analyze && open dist/stats.html",
    "// Maintenance": "========================================",
    "clean": "rm -rf dist node_modules/.vite node_modules/.tmp",
    "clean:all": "rm -rf dist node_modules",
    "reinstall": "npm run clean:all && npm install",
    "// CI/CD": "========================================",
    "ci": "npm run lint && npm run typecheck && npm run test && npm run build",
    "prepack": "npm run lint && npm run typecheck"
  },
  "dependencies": {
    "@sentry/react": "^8.47.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "firebase": "^12.4.0",
    "idb-keyval": "^6.2.1",
    "immer": "^10.1.3",
    "lucide-react": "^0.544.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.1",
    "tailwind-merge": "^3.3.1",
    "zod": "^3.24.1",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@firebase/rules-unit-testing": "^5.0.0",
    "@tailwindcss/vite": "^4.1.13",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.1.0",
    "@testing-library/user-event": "^14.5.2",
    "@types/node": "^24.5.2",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@typescript-eslint/parser": "^8.44.1",
    "@vitejs/plugin-react": "^5.0.3",
    "@vitest/ui": "^3.0.5",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "jsdom": "^26.0.0",
    "prettier": "^3.4.2",
    "rollup-plugin-visualizer": "^5.12.0",
    "tailwindcss": "^4.1.13",
    "terser": "^5.44.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.44.0",
    "vite": "^7.1.7",
    "vite-bundle-visualizer": "^1.2.1",
    "vitest": "^3.0.5",
    "workbox-build": "^7.3.0",
    "workbox-expiration": "^7.3.0",
    "workbox-precaching": "^7.3.0",
    "workbox-routing": "^7.3.0",
    "workbox-strategies": "^7.3.0"
  }
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/tsconfig.json
================================================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/tsconfig.app.json
================================================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "types": ["vite/client", "node"],
    "skipLibCheck": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "resolveJsonModule": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting - Production Strictness */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": true,
    "noPropertyAccessFromIndexSignature": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,
    "exactOptionalPropertyTypes": false,
    "noImplicitOverride": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"]
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/tsconfig.node.json
================================================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": ["node", "vitest/globals"],
    "skipLibCheck": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "resolveJsonModule": true,
    "noEmit": true,

    /* Linting - Production Strictness */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,
    "noImplicitOverride": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["vite.config.ts", "vitest.config.ts", "scripts/**/*.js", "scripts/**/*.ts"]
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/vite.config.ts
================================================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwind from '@tailwindcss/vite'
import { resolve } from 'path'
import { visualizer } from 'rollup-plugin-visualizer'
import { readFileSync, copyFileSync, rmSync } from 'fs'

/**
 * Production-Ready Vite Configuration for NeuraFit
 * React/TypeScript application with Firebase and Tailwind CSS
 *
 * Optimizations:
 * - Firebase SDK properly chunked by service (auth, firestore, functions, analytics)
 * - React/React-DOM in separate vendor chunk
 * - Lazy-loaded routes automatically code-split
 * - Terser minification with console removal in production
 * - Aggressive code splitting for optimal caching
 */
export default defineConfig(({ mode }) => {
  const isProduction = mode === 'production'

  // Read package.json for version
  const packageJson = JSON.parse(readFileSync(resolve(__dirname, 'package.json'), 'utf-8')) as { version: string }
  const appVersion: string = packageJson.version
  const buildTime: string = new Date().toISOString()
  const buildDate: string = new Date().toISOString().split('T')[0] || ''

  return {
    // Base public path - use absolute paths for production
    base: '/',

    // Path resolution - matches tsconfig paths
    resolve: {
      alias: {
        '@': resolve(__dirname, 'src'),
      },
      // Resolve extensions in order
      extensions: ['.mjs', '.js', '.mts', '.ts', '.jsx', '.tsx', '.json'],
      // Prefer ESM over CJS
      mainFields: ['module', 'jsnext:main', 'jsnext', 'main'],
      // Dedupe React to prevent multiple instances
      dedupe: ['react', 'react-dom', 'react-is', 'scheduler'],
    },

    // Plugins
    plugins: [
      react(),
      tailwind(),
      // Clear Vite cache before build to prevent stale dependency issues
      {
        name: 'clear-vite-cache',
        apply: 'build' as const,
        enforce: 'pre' as const,
        async configResolved() {
          try {
            const viteCachePath = resolve(__dirname, 'node_modules/.vite')
            rmSync(viteCachePath, { recursive: true, force: true })
            console.log('✅ Cleared Vite cache before build')
          } catch (error) {
            console.warn('⚠️ Failed to clear Vite cache:', error)
          }
        },
      },
      // Bundle analyzer (only when ANALYZE=true)
      process.env.ANALYZE === 'true' &&
        visualizer({
          open: true,
          filename: 'dist/stats.html',
          gzipSize: true,
          brotliSize: true,
          template: 'treemap', // 'sunburst', 'treemap', 'network'
        }),
      // HTML transform plugin to inject version and build time
      {
        name: 'html-transform',
        transformIndexHtml(html: string): string {
          return html
            .replaceAll('__APP_VERSION__', appVersion)
            .replaceAll('__BUILD_TIME__', buildTime)
            .replaceAll('__BUILD_DATE__', buildDate)
        },
      },
      // Service worker copy plugin
      {
        name: 'copy-service-worker',
        writeBundle() {
          try {
            copyFileSync(
              resolve(__dirname, 'public/sw.js'),
              resolve(__dirname, 'dist/sw.js')
            );
            console.log('✅ Service worker copied to dist/sw.js');
          } catch (error) {
            console.warn('⚠️ Failed to copy service worker:', error);
          }
        },
      },
    ].filter(Boolean),

    // Development server
    server: {
      port: 5173,
      host: 'localhost',
      // Enable CORS for development
      cors: true,
      // Disable COOP in development to allow Firebase Auth popups
      headers: {
        'Cross-Origin-Opener-Policy': 'unsafe-none',
        'Cross-Origin-Embedder-Policy': 'unsafe-none',
      },
      // Custom middleware to serve sw.js with correct MIME type
      middlewares: [
        (req: any, res: any, next: any) => {
          if (req.url === '/sw.js') {
            res.setHeader('Content-Type', 'application/javascript');
          }
          next();
        },
      ],
    },

    // Build configuration
    build: {
      target: 'es2022',
      outDir: 'dist',
      // Enable sourcemaps for production debugging (hidden from browser by default)
      sourcemap: isProduction ? 'hidden' : true,

      // Minification with Terser
      minify: 'terser',
      terserOptions: {
        compress: {
          // Remove console statements in production
          drop_console: isProduction,
          drop_debugger: isProduction,
          // Remove unused code
          pure_funcs: isProduction ? ['console.log', 'console.info', 'console.debug', 'console.trace'] : [],
          // Additional optimizations
          passes: 2,
          unsafe_arrows: true,
          unsafe_methods: true,
        },
        mangle: {
          // Mangle property names for smaller bundle
          safari10: true,
        },
        format: {
          // Remove comments
          comments: false,
        },
      },

      // Chunk size warnings
      chunkSizeWarningLimit: 500, // 500KB warning threshold for optimal performance

      // Rollup options for advanced chunking
      rollupOptions: {
        output: {
          // Optimized manual chunks for better caching
          manualChunks: (id: string) => {
            // Core React libraries - must be loaded first
            // Include all React-related packages to prevent duplication
            if (
              id.includes('node_modules/react/') ||
              id.includes('node_modules/react-dom/') ||
              id.includes('node_modules/scheduler/') ||
              id.includes('node_modules/react-is/')
            ) {
              return 'vendor-react'
            }

            // React Router - changes with route updates
            if (id.includes('node_modules/react-router-dom/') || id.includes('node_modules/react-router/')) {
              return 'vendor-router'
            }

            // Firebase - split by service for better caching and smaller initial bundles
            if (id.includes('node_modules/firebase/auth') || id.includes('node_modules/@firebase/auth')) {
              return 'firebase-auth'
            }
            if (id.includes('node_modules/firebase/firestore') || id.includes('node_modules/@firebase/firestore')) {
              return 'firebase-firestore'
            }
            if (id.includes('node_modules/firebase/functions') || id.includes('node_modules/@firebase/functions')) {
              return 'firebase-functions'
            }
            if (id.includes('node_modules/firebase/analytics') || id.includes('node_modules/@firebase/analytics')) {
              return 'firebase-analytics'
            }
            // Remaining Firebase core
            if (id.includes('node_modules/firebase') || id.includes('node_modules/@firebase')) {
              return 'firebase-core'
            }

            // UI libraries - icons and styling utilities
            if (id.includes('node_modules/lucide-react/')) {
              return 'vendor-icons'
            }
            if (
              id.includes('node_modules/class-variance-authority/') ||
              id.includes('node_modules/clsx/') ||
              id.includes('node_modules/tailwind-merge/')
            ) {
              return 'vendor-ui-utils'
            }

            // State management - Zustand and Immer
            if (id.includes('node_modules/zustand/') || id.includes('node_modules/immer/')) {
              return 'vendor-state'
            }

            // React Query - data fetching
            if (id.includes('node_modules/@tanstack/react-query/')) {
              return 'vendor-query'
            }

            // Sentry - error monitoring
            if (id.includes('node_modules/@sentry/')) {
              return 'vendor-monitoring'
            }

            // Zod - validation
            if (id.includes('node_modules/zod/')) {
              return 'vendor-validation'
            }

            // IndexedDB - offline storage
            if (id.includes('node_modules/idb-keyval/')) {
              return 'vendor-storage'
            }

            // Other node_modules - group remaining dependencies
            if (id.includes('node_modules/')) {
              return 'vendor-misc'
            }

            // Application code - let Vite handle automatic splitting
            // This allows for route-based code splitting via lazy loading
            return undefined
          },

          // Naming patterns for chunks
          chunkFileNames: (chunkInfo) => {
            // Use content hash for long-term caching
            const name = chunkInfo.name || 'chunk'
            return `assets/${name}-[hash].js`
          },
          entryFileNames: 'assets/[name]-[hash].js',
          assetFileNames: (assetInfo) => {
            // Organize assets by type
            const name = assetInfo.name || ''
            if (name.endsWith('.css')) {
              return 'assets/css/[name]-[hash][extname]'
            }
            if (/\.(png|jpe?g|svg|gif|webp|avif)$/.test(name)) {
              return 'assets/images/[name]-[hash][extname]'
            }
            if (/\.(woff2?|eot|ttf|otf)$/.test(name)) {
              return 'assets/fonts/[name]-[hash][extname]'
            }
            return 'assets/[name]-[hash][extname]'
          },
        },

        // Tree-shaking optimizations
        treeshake: {
          moduleSideEffects: 'no-external',
          propertyReadSideEffects: false,
          tryCatchDeoptimization: false,
        },
      },

      // CSS code splitting
      cssCodeSplit: true,

      // Report compressed size (disable in CI for faster builds)
      reportCompressedSize: !process.env.CI,

      // Increase chunk size limit for better optimization
      assetsInlineLimit: 4096, // 4KB - inline small assets as base64
    },

    // Optimize dependencies
    optimizeDeps: {
      include: [
        'react',
        'react-dom',
        'react-dom/client',
        'react/jsx-runtime',
        'react/jsx-dev-runtime',
        'react-router-dom',
        'zustand',
        'immer',
        // Include Sentry to fix module resolution issues
        '@sentry/react',
        'hoist-non-react-statics',
      ],
      exclude: [],
      // Force CommonJS dependencies to be pre-bundled as ESM
      esbuildOptions: {
        // Resolve .cjs files as CommonJS
        mainFields: ['module', 'main'],
      },
      // CRITICAL: Always disable caching to prevent stale React instances
      // This prevents the "Cannot read properties of null (reading 'useEffect')" error
      noDiscovery: true,
      // CRITICAL: Always force re-optimization to ensure React is fresh
      force: true,
    },

    // Global constants
    define: {
      __APP_VERSION__: JSON.stringify(appVersion),
      __BUILD_TIME__: JSON.stringify(buildTime),
      global: 'globalThis',
    },

    // Enable esbuild for faster builds
    esbuild: {
      // Drop console in production via esbuild (backup to terser)
      drop: isProduction ? ['console', 'debugger'] : [],
      // Legal comments handling
      legalComments: 'none',
    },
  }
})

================================================================================
FILE: /Users/salscrudato/Projects/neurafit/vitest.config.ts
================================================================================
import { defineConfig } from 'vitest/config'
import react from '@vitejs/plugin-react'
import { resolve } from 'path'

/**
 * Vitest Configuration for NeuraFit
 * Unit and integration testing setup with React Testing Library
 */
export default defineConfig({
  plugins: [react()],
  
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src'),
    },
  },

  test: {
    // Test environment
    environment: 'jsdom',

    // Setup files
    setupFiles: ['./src/test/setup.ts'],

    // Global test utilities
    globals: true,

    // Test timeout for async operations (10 seconds)
    testTimeout: 10000,

    // Coverage configuration
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html', 'lcov'],
      exclude: [
        'node_modules/',
        'src/test/',
        '**/*.d.ts',
        '**/*.config.*',
        '**/mockData',
        'dist/',
      ],
      thresholds: {
        lines: 70,
        functions: 70,
        branches: 65,
        statements: 70,
      },
    },

    // Test file patterns
    include: ['src/**/*.{test,spec}.{ts,tsx}'],

    // Exclude patterns
    exclude: [
      'node_modules',
      'dist',
      '.idea',
      '.git',
      '.cache',
    ],
  },
})



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/eslint.config.js
================================================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default [
  // Global ignores
  {
    ignores: ['dist/**', 'functions/**', 'node_modules/**', '*.config.js']
  },

  // Frontend TypeScript/React configuration
  {
    files: ['src/**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser,
        process: 'readonly',
        __APP_VERSION__: 'readonly',
        __BUILD_TIME__: 'readonly',
        __DEV__: 'readonly',
        NodeJS: 'readonly',
        RequestInit: 'readonly'
      },
      parser: tseslint.parser,
      parserOptions: {
        ecmaVersion: 2020,
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true
        }
      }
    },
    plugins: {
      '@typescript-eslint': tseslint.plugin,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh
    },
    rules: {
      ...js.configs.recommended.rules,
      ...tseslint.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,

      // React Refresh
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true }
      ],

      // TypeScript
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unused-vars': ['error', {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        destructuredArrayIgnorePattern: '^_'
      }],
      '@typescript-eslint/consistent-type-imports': ['warn', {
        prefer: 'type-imports',
        fixStyle: 'inline-type-imports'
      }],
      '@typescript-eslint/no-unnecessary-condition': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off', // Allow non-null assertions when we know the value exists

      // General JavaScript
      'no-unused-vars': 'off', // Use TypeScript version instead
      'no-console': 'off', // Allow console.log (stripped in production build)
      'no-debugger': 'warn', // Warn but don't error on debugger
      'prefer-const': 'error',
      'no-var': 'error',

      // React (React 19 doesn't need imports)
      'react/jsx-uses-react': 'off',
      'react/react-in-jsx-scope': 'off'
    }
  },

  // Configuration files
  {
    files: ['*.config.{js,ts}', 'scripts/**/*.js'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.node,
      parser: tseslint.parser,
      parserOptions: {
        ecmaVersion: 2020,
        sourceType: 'module'
      }
    },
    plugins: {
      '@typescript-eslint': tseslint.plugin
    },
    rules: {
      ...js.configs.recommended.rules,
      ...tseslint.configs.recommended.rules
    }
  }
]


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/firebase.json
================================================================================
{
  "functions": [
    {
      "source": "functions",
      "codebase": "default",
      "ignore": [
        "node_modules",
        ".git",
        "firebase-debug.log",
        "firebase-debug.*.log",
        "*.local"
      ],
      "predeploy": [
        "node \"$RESOURCE_DIR\"/node_modules/typescript/lib/tsc.js -p \"$RESOURCE_DIR\"/tsconfig.json"
      ]
    }
  ],
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "cleanUrls": true,
    "trailingSlash": false,
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "/**",
        "headers": [
          {
            "key": "Strict-Transport-Security",
            "value": "max-age=31536000; includeSubDomains; preload"
          },
          {
            "key": "Content-Security-Policy",
            "value": "default-src 'self'; script-src 'self' https://www.googletagmanager.com https://www.google-analytics.com https://apis.google.com https://www.gstatic.com https://www.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' https://fonts.gstatic.com data:; connect-src 'self' https://neurastack.ai https://neurafit-ai-2025.web.app https://neurafit-ai-2025.firebaseapp.com https://firestore.googleapis.com https://www.googleapis.com https://apis.google.com https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://firebase.googleapis.com https://firebaseinstallations.googleapis.com https://fonts.googleapis.com https://fonts.gstatic.com https://www.google-analytics.com https://analytics.google.com https://stats.g.doubleclick.net https://accounts.google.com https://generateworkout-5zdm7qwt5a-uc.a.run.app https://*.cloudfunctions.net https://www.google.com/recaptcha/ https://recaptcha.google.com https://www.recaptcha.net; frame-src https://accounts.google.com https://content-firebaseappcheck.googleapis.com https://*.firebaseapp.com https://www.google.com https://recaptcha.google.com https://www.recaptcha.net; frame-ancestors 'none'; base-uri 'self'; form-action 'self'"
          },
          {
            "key": "Cross-Origin-Embedder-Policy",
            "value": "unsafe-none"
          },
          {
            "key": "Referrer-Policy",
            "value": "strict-origin-when-cross-origin"
          },
          {
            "key": "Permissions-Policy",
            "value": "geolocation=(), microphone=(), camera=(), interest-cohort=()"
          },
          {
            "key": "X-Content-Type-Options",
            "value": "nosniff"
          },
          {
            "key": "X-Frame-Options",
            "value": "DENY"
          },
          {
            "key": "X-XSS-Protection",
            "value": "1; mode=block"
          }
        ]
      },
      {
        "source": "/assets/**",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "**/*.js",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          },
          {
            "key": "Content-Type",
            "value": "application/javascript; charset=utf-8"
          }
        ]
      },
      {
        "source": "**/*.css",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          },
          {
            "key": "Content-Type",
            "value": "text/css; charset=utf-8"
          }
        ]
      },
      {
        "source": "**/*.@(jpg|jpeg|gif|png|svg|webp|ico|avif)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "**/*.@(woff|woff2|ttf|eot|otf)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=31536000, immutable"
          }
        ]
      },
      {
        "source": "/index.html",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache, no-store, must-revalidate"
          }
        ]
      },
      {
        "source": "/sw.js",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache, no-store, must-revalidate"
          },
          {
            "key": "Content-Type",
            "value": "application/javascript; charset=utf-8"
          },
          {
            "key": "Service-Worker-Allowed",
            "value": "/"
          }
        ]
      },
      {
        "source": "/manifest.json",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "public, max-age=86400"
          }
        ]
      }
    ]
  },
  "firestore": {
    "database": "(default)",
    "location": "nam5",
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "emulators": {
    "firestore": {
      "port": 8080
    },
    "ui": {
      "enabled": true,
      "port": 4000
    }
  }
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/firestore.rules
================================================================================
/**
 * Firestore Security Rules
 *
 * Comprehensive security rules for the Neurafit application
 * These rules ensure data privacy and prevent unauthorized access
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for common validations
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    function isBasicUserData() {
      let data = request.resource.data;
      // Allow basic user documents with minimal fields
      // For merge operations, uid might not be in the request data, so check existing resource
      let uidValid = ('uid' in data && data.uid is string && data.uid == request.auth.uid) ||
                     (!('uid' in data) && resource != null && resource.data.uid == request.auth.uid);

      return uidValid &&
             (!('email' in data) || data.email is string) &&
             (!('onboarded' in data) || data.onboarded is bool) &&
             (!('displayName' in data) || data.displayName is string) &&
             (!('photoURL' in data) || data.photoURL is string) &&
             (!('provider' in data) || data.provider is string) &&
             (!('created_at' in data) || data.created_at is timestamp) &&
             (!('updated_at' in data) || data.updated_at is timestamp);
    }

    function isValidUserData() {
      let data = request.resource.data;
      // Full validation for complete user documents
      // For merge operations, uid might not be in the request data, so check existing resource
      let uidValid = ('uid' in data && data.uid is string && data.uid == request.auth.uid) ||
                     (!('uid' in data) && resource != null && resource.data.uid == request.auth.uid);

      return uidValid &&
             (!('email' in data) || data.email is string) &&
             (!('onboarded' in data) || data.onboarded is bool) &&
             (!('displayName' in data) || data.displayName is string) &&
             (!('photoURL' in data) || data.photoURL is string) &&
             (!('provider' in data) || data.provider is string) &&
             // Optional fields validation (if present)
             (!('experience' in data) || (data.experience is string && data.experience in ['Beginner', 'Intermediate', 'Advanced', 'Expert'])) &&
             (!('goals' in data) || data.goals is list) &&
             (!('equipment' in data) || data.equipment is list) &&
             (!('injuries' in data) || data.injuries is list) &&
             (!('sex' in data) || data.sex is string) &&
             (!('age' in data) || data.age is number) &&
             (!('height_ft' in data) || data.height_ft is number) &&
             (!('height_in' in data) || data.height_in is number) &&
             (!('height_total_inches' in data) || data.height_total_inches is number) &&
             (!('weight_lb' in data) || data.weight_lb is number) &&
             (!('injury_details' in data) || data.injury_details is string) &&
             (!('health_consent' in data) || data.health_consent is bool) &&
             (!('created_at' in data) || data.created_at is timestamp) &&
             (!('updated_at' in data) || data.updated_at is timestamp);
    }

    function isValidWorkoutData() {
      let data = request.resource.data;
      return data.keys().hasAll(['createdAt', 'exercises']) &&
             data.createdAt is timestamp &&
             data.exercises is list &&
             data.exercises.size() > 0 &&
             data.exercises.size() <= 50 &&
             (!('duration' in data) || (data.duration is number && data.duration > 0 && data.duration <= 7200)) &&
             (!('type' in data) || data.type is string) &&
             (!('completed' in data) || data.completed is bool) &&
             (!('completedAt' in data) || data.completedAt is timestamp) &&
             (!('feedback' in data) || data.feedback is string) &&
             (!('rpe' in data) || (data.rpe is number && data.rpe >= 1 && data.rpe <= 10));
    }



    // User profiles - allow users to read and manage their own data
    match /users/{uid} {
      allow read: if isAuthenticated() && isOwner(uid);
      // Allow users to create and update their own documents (permissive for onboarding)
      allow create, update: if isAuthenticated() && isOwner(uid);

      // Workouts subcollection - with validation
      match /workouts/{workoutId} {
        allow read: if isAuthenticated() && isOwner(uid);
        allow create: if isAuthenticated() && isOwner(uid) && isValidWorkoutData();
        allow update: if isAuthenticated() && isOwner(uid);
        allow delete: if isAuthenticated() && isOwner(uid);
      }

      // Other subcollections - allow users to manage their own data
      match /{subcollection}/{docId} {
        allow read, write: if isAuthenticated() && isOwner(uid);
      }
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

================================================================================
FILE: /Users/salscrudato/Projects/neurafit/firestore.indexes.json
================================================================================
{
  "indexes": [
    {
      "collectionGroup": "workouts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "workouts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "date",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    },
    {
      "collectionGroup": "workouts",
      "queryScope": "COLLECTION",
      "fields": [
        {
          "fieldPath": "userId",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "status",
          "order": "ASCENDING"
        },
        {
          "fieldPath": "createdAt",
          "order": "DESCENDING"
        }
      ],
      "density": "SPARSE_ALL"
    }
  ],
  "fieldOverrides": []
}

================================================================================
FILE: /Users/salscrudato/Projects/neurafit/functions/package.json
================================================================================
{
  "name": "functions",
  "version": "1.0.1",
  "description": "Firebase Cloud Functions for NeuraFit",
  "scripts": {
    "// Build": "========================================",
    "build": "tsc",
    "build:watch": "tsc --watch",
    "build:clean": "rm -rf lib && npm run build",
    "// Development": "========================================",
    "serve": "npm run build && firebase emulators:start --only functions",
    "shell": "npm run build && firebase functions:shell",
    "start": "npm run shell",
    "// Code Quality": "========================================",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "typecheck": "tsc --noEmit",
    "// Testing": "========================================",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:coverage": "vitest run --coverage",
    "// Deployment": "========================================",
    "deploy": "firebase deploy --only functions",
    "logs": "firebase functions:log"
  },
  "engines": {
    "node": "22"
  },
  "main": "lib/index.js",
  "dependencies": {
    "@types/lodash.isequal": "^4.5.8",
    "ajv": "^8.17.1",
    "ajv-formats": "^3.0.1",
    "firebase-admin": "^13.5.0",
    "firebase-functions": "^6.0.1",
    "lodash.isequal": "^4.5.0",
    "openai": "^6.2.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@typescript-eslint/eslint-plugin": "^8.45.0",
    "@typescript-eslint/parser": "^8.45.0",
    "@vitest/coverage-v8": "^3.2.4",
    "eslint": "^9.36.0",
    "firebase-functions-test": "^3.1.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.45.0",
    "vitest": "^3.2.4"
  },
  "private": true
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/functions/tsconfig.json
================================================================================
{
  "compilerOptions": {
    /* Language and Environment */
    "target": "es2017",
    "lib": ["es2017"],

    /* Modules */
    "module": "commonjs",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "resolveJsonModule": true,

    /* Emit */
    "outDir": "lib",
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,
    "removeComments": true,

    /* Type Checking */
    "strict": true,
    "noImplicitReturns": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,

    /* Interop Constraints */
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "compileOnSave": true,
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "lib",
    "**/*.test.ts",
    "**/*.spec.ts"
  ]
}


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/functions/vitest.config.ts
================================================================================
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    include: ['src/**/*.test.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'lib/',
        'src/**/*.test.ts',
        'src/index.old.ts',
        'src/index.ts.backup',
      ],
    },
  },
});



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/functions/eslint.config.js
================================================================================
const js = require('@eslint/js');
const tseslint = require('typescript-eslint');

module.exports = tseslint.config(
  // Global ignores
  {
    ignores: ['lib/**/*', 'node_modules/**/*', 'eslint.config.js', '**/*.test.ts', '**/*.spec.ts']
  },

  // Base recommended configs
  js.configs.recommended,
  ...tseslint.configs.recommended,

  // TypeScript configuration
  {
    files: ['src/**/*.ts'],
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: {
        process: 'readonly',
        console: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        exports: 'writable',
        module: 'writable',
        require: 'readonly',
        global: 'readonly',
        NodeJS: 'readonly'
      },
      parserOptions: {
        project: ['./tsconfig.json'],
        tsconfigRootDir: __dirname,
      }
    },
    rules: {
      // TypeScript
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unused-vars': ['error', {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        destructuredArrayIgnorePattern: '^_'
      }],
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-misused-promises': 'error',

      // Code Style
      'quotes': ['error', 'single', { avoidEscape: true }],
      'indent': ['error', 2],
      'semi': ['error', 'always'],
      'comma-dangle': ['error', 'always-multiline'],

      // Best Practices
      'no-console': 'off', // Allow console in Cloud Functions
      'no-debugger': 'warn',
      'prefer-const': 'error',
      'no-var': 'error',
    }
  }
);


================================================================================
FILE: /Users/salscrudato/Projects/neurafit/index.html
================================================================================
<!doctype html>
<html lang="en">
  <head>
    <!-- ============================================ -->
    <!-- CORE META TAGS -->
    <!-- ============================================ -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes, viewport-fit=cover" />
    
    <!-- SEO: Primary meta tags -->
    <title>NeuraFit - AI Workout Generator | Personalized Fitness Plans</title>
    <meta name="description" content="Get AI-powered workout plans in 30 seconds! Personalized for your goals, equipment & fitness level. Join thousands transforming their fitness with smart training plans." />
    <meta name="keywords" content="AI workout generator, personalized fitness app, custom workout plans, AI fitness trainer, smart exercise planner, adaptive training program, fitness AI, workout builder" />
    <meta name="author" content="NeuraFit Team" />
    <meta name="robots" content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" />
    
    <!-- Canonical URL: Primary production domain -->
    <link rel="canonical" href="https://neurastack.ai/" />

    <!-- ============================================ -->
    <!-- PWA & MOBILE OPTIMIZATION -->
    <!-- ============================================ -->
    
    <!-- PWA: Theme colors for browser chrome -->
    <meta name="theme-color" content="#1f2937" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
    
    <!-- PWA: Manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Mobile: App-like experience -->
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="NeuraFit" />
    <meta name="application-name" content="NeuraFit" />
    
    <!-- Mobile: Disable automatic detection -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="msapplication-tap-highlight" content="no" />
    
    <!-- Mobile: Orientation preference (portrait) -->
    <meta name="screen-orientation" content="portrait" />
    <meta name="orientation" content="portrait" />

    <!-- ============================================ -->
    <!-- ICONS & FAVICONS -->
    <!-- ============================================ -->
    
    <!-- Primary favicon (SVG for modern browsers) -->
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    
    <!-- Fallback favicons (PNG for older browsers) -->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="shortcut icon" href="/favicon.ico" />
    
    <!-- Apple Touch Icons (iOS home screen) -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <!-- Android Chrome Icons (Android home screen) -->
    <link rel="icon" type="image/png" sizes="192x192" href="/android-chrome-192x192.png" />
    <link rel="icon" type="image/png" sizes="512x512" href="/android-chrome-512x512.png" />
    
    <!-- Windows Tiles (Microsoft Edge) -->
    <meta name="msapplication-TileColor" content="#1f2937" />
    <meta name="msapplication-TileImage" content="/android-chrome-512x512.png" />
    <meta name="msapplication-config" content="/browserconfig.xml" />

    <!-- ============================================ -->
    <!-- PERFORMANCE OPTIMIZATION -->
    <!-- ============================================ -->
    
    <!-- Preconnect: Critical third-party domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://js.stripe.com" crossorigin />
    <link rel="preconnect" href="https://o4508479088050176.ingest.us.sentry.io" crossorigin />

    <!-- DNS Prefetch: Firebase services -->
    <link rel="dns-prefetch" href="https://firebaseinstallations.googleapis.com" />
    <link rel="dns-prefetch" href="https://firestore.googleapis.com" />
    <link rel="dns-prefetch" href="https://identitytoolkit.googleapis.com" />
    <link rel="dns-prefetch" href="https://www.google-analytics.com" />
    
    <!-- Font: Inter (optimized with display=swap) -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />

    <!-- ============================================ -->
    <!-- SOCIAL MEDIA & SHARING -->
    <!-- ============================================ -->
    
    <!-- Open Graph: Facebook & LinkedIn -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://neurastack.ai/" />
    <meta property="og:title" content="NeuraFit - AI Workout Generator | Get Fit with Smart Training" />
    <meta property="og:description" content="Transform your fitness with AI-powered workout plans! Personalized training in 30 seconds. Join thousands getting stronger with intelligent fitness coaching." />
    <meta property="og:image" content="https://neurastack.ai/android-chrome-512x512.png" />
    <meta property="og:image:width" content="512" />
    <meta property="og:image:height" content="512" />
    <meta property="og:image:alt" content="NeuraFit AI Workout Generator - Personalized Fitness App" />
    <meta property="og:site_name" content="NeuraFit" />
    <meta property="og:locale" content="en_US" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="NeuraFit - AI Workout Generator | Smart Fitness Training" />
    <meta name="twitter:description" content="Get personalized AI workouts in 30 seconds! Smart training plans for your goals & equipment. Join thousands transforming their fitness." />
    <meta name="twitter:image" content="https://neurastack.ai/android-chrome-512x512.png" />
    <meta name="twitter:image:alt" content="NeuraFit AI Workout Generator - Personalized Fitness Training App" />

    <!-- ============================================ -->
    <!-- STRUCTURED DATA (JSON-LD) FOR SEO -->
    <!-- ============================================ -->
    
    <!-- Schema.org: WebApplication -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebApplication",
      "name": "NeuraFit",
      "alternateName": "NeuraFit AI Workout Generator",
      "description": "AI-powered personalized workout generator that creates custom fitness plans tailored to your goals, experience level, and available equipment.",
      "url": "https://neurastack.ai/",
      "applicationCategory": "HealthApplication",
      "operatingSystem": "Web, iOS, Android",
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD",
        "availability": "https://schema.org/InStock"
      },
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "4.8",
        "ratingCount": "1247",
        "bestRating": "5",
        "worstRating": "1"
      },
      "author": {
        "@type": "Organization",
        "name": "NeuraFit Team",
        "url": "https://neurastack.ai/"
      },
      "publisher": {
        "@type": "Organization",
        "name": "NeuraFit",
        "logo": {
          "@type": "ImageObject",
          "url": "https://neurastack.ai/android-chrome-512x512.png",
          "width": 512,
          "height": 512
        }
      },
      "screenshot": "https://neurastack.ai/android-chrome-512x512.png",
      "softwareVersion": "__APP_VERSION__",
      "datePublished": "2024-01-01",
      "dateModified": "__BUILD_DATE__",
      "keywords": "AI workout generator, personalized fitness, custom training plans, smart exercise planner, fitness AI, workout builder",
      "featureList": [
        "AI-powered workout generation",
        "Personalized training plans",
        "Equipment-based customization",
        "Progress tracking",
        "Adaptive difficulty",
        "Goal-oriented training"
      ],
      "applicationSubCategory": "Fitness & Health",
      "downloadUrl": "https://neurastack.ai/",
      "installUrl": "https://neurastack.ai/",
      "memoryRequirements": "50MB",
      "storageRequirements": "100MB"
    }
    </script>

    <!-- Schema.org: Organization -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "NeuraFit",
      "alternateName": "NeuraFit AI Fitness",
      "url": "https://neurastack.ai/",
      "logo": "https://neurastack.ai/android-chrome-512x512.png",
      "description": "Leading AI-powered fitness platform providing personalized workout plans and intelligent training solutions.",
      "foundingDate": "2024"
    }
    </script>

    <!-- Schema.org: FAQ -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "How does NeuraFit's AI workout generator work?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "NeuraFit uses advanced AI algorithms to analyze your fitness goals, experience level, available equipment, and any injuries to create personalized workout plans. The AI considers hundreds of variables to generate optimal training routines tailored specifically for you."
          }
        },
        {
          "@type": "Question",
          "name": "Is NeuraFit free to use?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "NeuraFit offers 50 free workouts for new users. For unlimited access to AI-powered workouts and advanced features, we offer affordable premium subscriptions."
          }
        },
        {
          "@type": "Question",
          "name": "What types of workouts can NeuraFit generate?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "NeuraFit can generate various workout types including strength training, cardio, HIIT, bodyweight exercises, home workouts, gym routines, and specialized programs for different fitness goals like weight loss, muscle building, and endurance."
          }
        },
        {
          "@type": "Question",
          "name": "Do I need equipment to use NeuraFit workouts?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "No! NeuraFit can generate effective bodyweight workouts requiring no equipment. However, if you have gym equipment or home fitness gear, the AI will incorporate these tools to create more diverse and challenging routines."
          }
        }
      ]
    }
    </script>

    <!-- ============================================ -->
    <!-- CRITICAL INLINE STYLES -->
    <!-- ============================================ -->
    
    <style>
      /* Prevent text selection on non-interactive elements (mobile optimization) */
      * {
        -webkit-tap-highlight-color: transparent;
      }

      /* Allow text selection for inputs and content areas */
      input, textarea, [contenteditable] {
        -webkit-user-select: text;
        -moz-user-select: text;
        -ms-user-select: text;
        user-select: text;
      }

      /* iOS PWA Safe Area Support */
      html {
        height: 100%;
        /* Support for iOS safe areas */
        height: 100vh;
        height: -webkit-fill-available;
        /* Prevent horizontal scrolling */
        overflow-x: hidden;
        width: 100%;
      }

      /* Prevent overscroll bounce on iOS */
      body {
        margin: 0;
        padding: 0;
        overscroll-behavior: none;
        -webkit-overflow-scrolling: touch;
        width: 100%;
        max-width: 100vw;
        height: 100%;
        /* Use viewport height that accounts for iOS address bar */
        min-height: 100vh;
        min-height: -webkit-fill-available;
        /* Prevent horizontal scrolling */
        overflow-x: hidden;
        position: relative;
      }

      /* Root container with proper scrolling and safe area support */
      #root {
        width: 100%;
        max-width: 100vw;
        min-height: 100vh;
        min-height: -webkit-fill-available;
        /* Support for iOS safe areas - add padding for notch/status bar */
        padding-top: env(safe-area-inset-top);
        padding-bottom: env(safe-area-inset-bottom);
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
        /* Prevent horizontal scrolling */
        overflow-x: hidden;
        position: relative;
      }

      /* Landscape warning overlay (triggered by orientation.ts utility) */
      .landscape-warning::before {
        content: "📱 Please rotate your device to portrait mode for the best experience";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.95);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        z-index: 9999;
        font-size: 18px;
        font-weight: 500;
        padding: 40px 20px;
        line-height: 1.5;
      }
    </style>
  </head>
  <body>
    <!-- React root element with version metadata (dynamically injected during build) -->
    <div id="root" data-version="__APP_VERSION__" data-build-time="__BUILD_TIME__"></div>

    <!-- Main application entry point (Vite handles module bundling) -->
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/scripts/build-sw.js
================================================================================
/**
 * Build script for generating service worker with Workbox - Production Ready
 *
 * This script:
 * 1. Uses workbox-build to generate a complete service worker
 * 2. Bundles Workbox runtime with the service worker
 * 3. Outputs to dist/sw.js with optimizations
 *
 * Features:
 * - Precaches app shell and static assets
 * - Cache-first for static assets
 * - Stale-while-revalidate for API GETs
 * - Network-first for HTML navigation
 * - Query parameter normalization
 * - Broadcast channel for updates
 * - Offline support for shell + last workout
 */

import { generateSW } from 'workbox-build';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync, writeFileSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

// Read package.json for version
const packageJson = JSON.parse(readFileSync(join(rootDir, 'package.json'), 'utf-8'));
const version = packageJson.version;

async function buildServiceWorker() {
  try {
    console.log('🔨 Building production service worker with Workbox...');
    console.log('   📦 Features: precaching, offline support, smart caching strategies');

    const { count, size, warnings } = await generateSW({
      // Output service worker file
      swDest: join(rootDir, 'dist/sw.js'),

      // Directory to scan for files to precache
      globDirectory: join(rootDir, 'dist'),

      // Patterns to match files for precaching (app shell)
      globPatterns: [
        // JavaScript bundles (versioned, cache-busted)
        '**/*.js',
        // CSS stylesheets
        '**/*.css',
        // Images and icons
        '**/*.{png,jpg,jpeg,gif,svg,ico,webp}',
        // Manifest
        'manifest.json',
      ],

      // Files to ignore (don't precache)
      globIgnores: [
        // Service worker itself
        '**/sw.js',
        // Workbox runtime (bundled separately)
        '**/workbox-*.js',
        // Source maps (too large, not needed for runtime)
        '**/*.map',
        // Development files
        '**/*.local',
        // Large assets that should be lazy-loaded
        '**/screenshots/**',
        '**/og-images/**',
      ],

      // Maximum file size to precache (2MB)
      maximumFileSizeToCacheInBytes: 2 * 1024 * 1024,

      // Runtime caching strategies
      runtimeCaching: [
        // Network-first for HTML navigation (app shell)
        // IMPORTANT: Only match actual HTML files, not module requests
        {
          urlPattern: ({ request, url }) => {
            // Only cache actual HTML navigation requests
            // Exclude module imports and API calls
            if (request.mode === 'navigate' && url.pathname.endsWith('.html')) {
              return true;
            }
            // Also match direct .html file requests (but not modules)
            if (url.pathname.endsWith('.html') && request.destination !== 'script') {
              return true;
            }
            return false;
          },
          handler: 'NetworkFirst',
          options: {
            cacheName: 'html-pages',
            networkTimeoutSeconds: 5,
            expiration: {
              maxEntries: 10,
              maxAgeSeconds: 60 * 60 * 24, // 24 hours
            },
          },
        },
        // Cache Google Fonts CSS with stale-while-revalidate
        {
          urlPattern: /^https:\/\/fonts\.googleapis\.com\/.*/,
          handler: 'StaleWhileRevalidate',
          options: {
            cacheName: 'google-fonts-stylesheets',
            expiration: {
              maxEntries: 20,
              maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
            },
          },
        },
        // Cache Google Fonts files with cache-first
        {
          urlPattern: /^https:\/\/fonts\.gstatic\.com\/.*/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'google-fonts-webfonts',
            expiration: {
              maxEntries: 30,
              maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
            },
            cacheableResponse: {
              statuses: [0, 200],
            },
          },
        },
        // Cache other Google APIs with stale-while-revalidate
        {
          urlPattern: /^https:\/\/.*\.googleapis\.com\/.*/,
          handler: 'StaleWhileRevalidate',
          options: {
            cacheName: 'google-apis',
            expiration: {
              maxEntries: 50,
              maxAgeSeconds: 60 * 60 * 24, // 24 hours
            },
            cacheableResponse: {
              statuses: [0, 200],
            },
          },
        },
        // Cache Firebase API calls
        {
          urlPattern: /^https:\/\/.*\.firebaseio\.com\/.*/,
          handler: 'NetworkFirst',
          options: {
            cacheName: 'firebase-api',
            networkTimeoutSeconds: 10,
            expiration: {
              maxEntries: 50,
              maxAgeSeconds: 60 * 5, // 5 minutes
            },
          },
        },
        // Cache images with cache-first
        {
          urlPattern: /\.(?:png|jpg|jpeg|svg|gif|webp)$/,
          handler: 'CacheFirst',
          options: {
            cacheName: 'images',
            expiration: {
              maxEntries: 100,
              maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
            },
          },
        },
      ],

      // Cache name with version for cache busting
      // Include timestamp for aggressive cache invalidation
      cacheId: `neurafit-v${version}-${Date.now()}`,

      // Skip waiting and claim clients immediately
      skipWaiting: true,
      clientsClaim: true,

      // Navigation preload disabled to avoid console warnings
      // The preloadResponse promise can be cancelled before settling,
      // causing "navigation preload request was cancelled" warnings
      navigationPreload: false,

      // Additional runtime code to explicitly disable navigation preload
      additionalManifestEntries: [],

      // Inject custom code to handle navigation preload
      inlineWorkboxRuntime: true,
    });

    // Post-process the service worker to add MIME type error prevention
    const swPath = join(rootDir, 'dist/sw.js');
    let swContent = readFileSync(swPath, 'utf-8');

    // Add MIME type error prevention code at the end, before the closing
    const mimeTypeErrorPrevention = `
// ============================================
// MIME Type Error Prevention
// ============================================
// Prevent serving HTML as JavaScript modules
// This catches cases where the service worker might serve HTML for script requests
self.addEventListener('fetch', (event) => {
  const { request } = event;

  // Only check GET requests
  if (request.method !== 'GET') return;

  // Check if this is a module/script request
  const isModuleRequest = request.destination === 'script' ||
                          request.destination === 'worker' ||
                          request.destination === 'sharedworker';

  if (isModuleRequest) {
    // Wrap the response to check for MIME type mismatches
    const originalRespond = event.respondWith.bind(event);
    event.respondWith = async function(responsePromise) {
      try {
        const response = await Promise.resolve(responsePromise);

        if (response && response.headers) {
          const contentType = response.headers.get('content-type') || '';

          // If we got HTML for a script request, that's an error
          if (contentType.includes('text/html')) {
            console.error('🚨 MIME Type Error Prevention: Blocked HTML response for script request', {
              url: request.url,
              destination: request.destination,
              contentType: contentType,
            });

            // Try to fetch fresh from network
            try {
              const freshResponse = await fetch(request.clone());
              const freshContentType = freshResponse.headers.get('content-type') || '';

              if (!freshContentType.includes('text/html')) {
                return freshResponse;
              }
            } catch (e) {
              // Network fetch failed, fall through to error
            }

            // Return a proper error response
            return new Response(
              'Module loading error: Invalid MIME type',
              {
                status: 400,
                statusText: 'Bad Request',
                headers: { 'Content-Type': 'text/plain' }
              }
            );
          }
        }

        return response;
      } catch (error) {
        console.error('Error in MIME type prevention handler:', error);
        throw error;
      }
    };
  }
});
`;

    // Append the prevention code before the source map comment
    if (swContent.includes('//# sourceMappingURL')) {
      swContent = swContent.replace(
        '//# sourceMappingURL',
        mimeTypeErrorPrevention + '\n//# sourceMappingURL'
      );
    } else {
      swContent += '\n' + mimeTypeErrorPrevention;
    }

    writeFileSync(swPath, swContent, 'utf-8');
    console.log(`✅ Added MIME type error prevention to service worker`);

    console.log(`✅ Service worker built successfully!`);
    console.log(`   📦 Precached ${count} files`);
    console.log(`   💾 Total size: ${(size / 1024).toFixed(2)} KB (${(size / 1024 / 1024).toFixed(2)} MB)`);
    console.log(`   🎯 Strategies: Cache-First (static), SWR (API), Network-First (HTML)`);
    console.log(`   🔄 Update notifications: BroadcastChannel + postMessage`);
    console.log(`   📴 Offline support: App shell + last workout`);
    console.log(`   🛡️  MIME type error prevention: Enabled`);

    if (warnings.length > 0) {
      console.warn('⚠️  Warnings:');
      warnings.forEach(warning => console.warn(`   - ${warning}`));
    }

  } catch (error) {
    console.error('❌ Failed to build service worker:', error);
    console.error('   Stack:', error.stack);
    process.exit(1);
  }
}

buildServiceWorker();



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/scripts/check-bundle-size.js
================================================================================
#!/usr/bin/env node

/**
 * Bundle Size Checker
 * 
 * Analyzes the production build and reports bundle sizes.
 * Warns if bundles exceed recommended thresholds.
 */

import { readFileSync, readdirSync, statSync } from 'fs';
import { join, extname } from 'path';
import { gzipSync } from 'zlib';

// Color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

// Size thresholds (in KB)
const THRESHOLDS = {
  initial: {
    warning: 250,  // 250KB gzipped
    error: 350,    // 350KB gzipped
  },
  chunk: {
    warning: 200,  // 200KB gzipped
    error: 300,    // 300KB gzipped
  },
  total: {
    warning: 1500, // 1.5MB gzipped
    error: 2000,   // 2MB gzipped
  },
};

/**
 * Format bytes to human-readable size
 */
function formatSize(bytes) {
  if (bytes < 1024) return `${bytes} B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
  return `${(bytes / 1024 / 1024).toFixed(2)} MB`;
}

/**
 * Get color based on size and threshold
 */
function getSizeColor(sizeKB, threshold) {
  if (sizeKB >= threshold.error) return colors.red;
  if (sizeKB >= threshold.warning) return colors.yellow;
  return colors.green;
}

/**
 * Get all files recursively
 */
function getAllFiles(dir, fileList = []) {
  const files = readdirSync(dir);

  files.forEach((file) => {
    const filePath = join(dir, file);
    const stat = statSync(filePath);

    if (stat.isDirectory()) {
      getAllFiles(filePath, fileList);
    } else {
      fileList.push(filePath);
    }
  });

  return fileList;
}

/**
 * Analyze a file
 */
function analyzeFile(filePath) {
  const content = readFileSync(filePath);
  const gzipped = gzipSync(content);

  return {
    path: filePath,
    size: content.length,
    gzipSize: gzipped.length,
    ext: extname(filePath),
  };
}

/**
 * Categorize chunks
 */
function categorizeChunk(filename) {
  // Entry point
  if (filename.includes('index-')) return 'entry';
  
  // Vendor chunks
  if (filename.includes('vendor-react')) return 'vendor-react';
  if (filename.includes('vendor-router')) return 'vendor-router';
  if (filename.includes('firebase-')) return 'firebase';
  if (filename.includes('vendor-')) return 'vendor';
  
  // Page chunks
  if (filename.includes('page-')) return 'page';
  if (filename.includes('workout-')) return 'workout';
  
  // Other
  return 'other';
}

/**
 * Main analysis function
 */
function analyzeBuild() {
  const distDir = join(process.cwd(), 'dist');
  const assetsDir = join(distDir, 'assets');

  console.log(`${colors.bright}${colors.cyan}📦 Bundle Size Analysis${colors.reset}\n`);

  try {
    // Get all files
    const allFiles = getAllFiles(assetsDir);
    
    // Filter JavaScript files
    const jsFiles = allFiles.filter((f) => f.endsWith('.js'));
    const cssFiles = allFiles.filter((f) => f.endsWith('.css'));

    // Analyze files
    const jsAnalysis = jsFiles.map(analyzeFile);
    const cssAnalysis = cssFiles.map(analyzeFile);

    // Calculate totals
    const totalJS = jsAnalysis.reduce((sum, f) => sum + f.size, 0);
    const totalJSGzip = jsAnalysis.reduce((sum, f) => sum + f.gzipSize, 0);
    const totalCSS = cssAnalysis.reduce((sum, f) => sum + f.size, 0);
    const totalCSSGzip = cssAnalysis.reduce((sum, f) => sum + f.gzipSize, 0);

    // Categorize chunks
    const categories = {
      entry: [],
      'vendor-react': [],
      'vendor-router': [],
      firebase: [],
      vendor: [],
      page: [],
      workout: [],
      other: [],
    };

    jsAnalysis.forEach((file) => {
      const filename = file.path.split('/').pop();
      const category = categorizeChunk(filename);
      categories[category].push(file);
    });

    // Print results
    console.log(`${colors.bright}JavaScript Bundles:${colors.reset}`);
    console.log('─'.repeat(80));

    // Entry point
    if (categories.entry.length > 0) {
      console.log(`\n${colors.bright}Entry Point:${colors.reset}`);
      categories.entry.forEach((file) => {
        const filename = file.path.split('/').pop();
        const sizeKB = file.gzipSize / 1024;
        const color = getSizeColor(sizeKB, THRESHOLDS.initial);
        console.log(
          `  ${color}${filename}${colors.reset}`,
          `\n    Raw: ${formatSize(file.size)} | Gzip: ${formatSize(file.gzipSize)}`
        );
      });
    }

    // Vendor chunks
    const vendorCategories = ['vendor-react', 'vendor-router', 'firebase', 'vendor'];
    vendorCategories.forEach((cat) => {
      if (categories[cat].length > 0) {
        console.log(`\n${colors.bright}${cat.charAt(0).toUpperCase() + cat.slice(1)}:${colors.reset}`);
        categories[cat].forEach((file) => {
          const filename = file.path.split('/').pop();
          const sizeKB = file.gzipSize / 1024;
          const color = getSizeColor(sizeKB, THRESHOLDS.chunk);
          console.log(
            `  ${color}${filename}${colors.reset}`,
            `\n    Raw: ${formatSize(file.size)} | Gzip: ${formatSize(file.gzipSize)}`
          );
        });
      }
    });

    // Page chunks
    const pageCategories = ['page', 'workout', 'other'];
    pageCategories.forEach((cat) => {
      if (categories[cat].length > 0) {
        console.log(`\n${colors.bright}${cat.charAt(0).toUpperCase() + cat.slice(1)} Chunks:${colors.reset}`);
        categories[cat].forEach((file) => {
          const filename = file.path.split('/').pop();
          const sizeKB = file.gzipSize / 1024;
          const color = getSizeColor(sizeKB, THRESHOLDS.chunk);
          console.log(
            `  ${color}${filename}${colors.reset}`,
            `\n    Raw: ${formatSize(file.size)} | Gzip: ${formatSize(file.gzipSize)}`
          );
        });
      }
    });

    // CSS
    if (cssAnalysis.length > 0) {
      console.log(`\n${colors.bright}CSS Files:${colors.reset}`);
      cssAnalysis.forEach((file) => {
        const filename = file.path.split('/').pop();
        console.log(
          `  ${colors.green}${filename}${colors.reset}`,
          `\n    Raw: ${formatSize(file.size)} | Gzip: ${formatSize(file.gzipSize)}`
        );
      });
    }

    // Summary
    console.log('\n' + '─'.repeat(80));
    console.log(`${colors.bright}Summary:${colors.reset}`);
    console.log(`  JavaScript: ${formatSize(totalJS)} (${formatSize(totalJSGzip)} gzipped)`);
    console.log(`  CSS: ${formatSize(totalCSS)} (${formatSize(totalCSSGzip)} gzipped)`);
    console.log(`  Total: ${formatSize(totalJS + totalCSS)} (${formatSize(totalJSGzip + totalCSSGzip)} gzipped)`);

    // Warnings
    const totalGzipKB = (totalJSGzip + totalCSSGzip) / 1024;
    console.log('\n' + '─'.repeat(80));
    
    if (totalGzipKB >= THRESHOLDS.total.error) {
      console.log(`${colors.red}❌ ERROR: Total bundle size exceeds ${THRESHOLDS.total.error}KB!${colors.reset}`);
      process.exit(1);
    } else if (totalGzipKB >= THRESHOLDS.total.warning) {
      console.log(`${colors.yellow}⚠️  WARNING: Total bundle size exceeds ${THRESHOLDS.total.warning}KB${colors.reset}`);
    } else {
      console.log(`${colors.green}✅ Bundle size is within acceptable limits${colors.reset}`);
    }

    // Recommendations
    console.log(`\n${colors.bright}Recommendations:${colors.reset}`);
    
    const largeChunks = jsAnalysis.filter((f) => f.gzipSize / 1024 > THRESHOLDS.chunk.warning);
    if (largeChunks.length > 0) {
      console.log(`  ${colors.yellow}• ${largeChunks.length} chunk(s) exceed ${THRESHOLDS.chunk.warning}KB${colors.reset}`);
      console.log(`    Consider splitting these chunks further`);
    }

    const entrySize = categories.entry.reduce((sum, f) => sum + f.gzipSize, 0) / 1024;
    if (entrySize > THRESHOLDS.initial.warning) {
      console.log(`  ${colors.yellow}• Entry point is ${entrySize.toFixed(2)}KB (target: <${THRESHOLDS.initial.warning}KB)${colors.reset}`);
      console.log(`    Consider lazy loading more components`);
    }

    console.log(`\n${colors.cyan}💡 Run 'npm run build:analyze' for detailed visualization${colors.reset}\n`);

  } catch (error) {
    console.error(`${colors.red}Error analyzing build:${colors.reset}`, error.message);
    process.exit(1);
  }
}

// Run analysis
analyzeBuild();



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/scripts/clear-all-caches.js
================================================================================
#!/usr/bin/env node

/**
 * Comprehensive Cache Clearing Script
 *
 * Clears ALL caches that could cause React hook errors:
 * - Vite cache (.vite, node_modules/.vite)
 * - Node modules cache (.cache, .tmp)
 * - TypeScript cache
 * - ESBuild cache
 *
 * This prevents the "Cannot read properties of null (reading 'useEffect')" error
 * which occurs when React instances are stale or duplicated.
 *
 * Run before: npm run dev, npm run build, npm run preview
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const projectRoot = path.resolve(__dirname, '..');

const cachePaths = [
  // Vite caches
  path.join(projectRoot, '.vite'),
  path.join(projectRoot, 'node_modules', '.vite'),
  
  // Node modules caches
  path.join(projectRoot, 'node_modules', '.cache'),
  path.join(projectRoot, 'node_modules', '.tmp'),
  
  // TypeScript cache
  path.join(projectRoot, 'node_modules', '.tsbuildinfo'),
  
  // ESBuild cache
  path.join(projectRoot, 'node_modules', '.esbuild'),
  
  // Dist directory (old builds)
  path.join(projectRoot, 'dist'),
];

function clearCache(cachePath) {
  try {
    if (fs.existsSync(cachePath)) {
      fs.rmSync(cachePath, { recursive: true, force: true });
      console.log(`✅ Cleared: ${path.relative(projectRoot, cachePath)}`);
      return true;
    }
  } catch (error) {
    console.warn(`⚠️  Failed to clear ${path.relative(projectRoot, cachePath)}: ${error.message}`);
    return false;
  }
  return false;
}

console.log('🧹 Clearing all caches to prevent React hook errors...\n');

let clearedCount = 0;
for (const cachePath of cachePaths) {
  if (clearCache(cachePath)) {
    clearedCount++;
  }
}

console.log(`\n✅ Cache clearing complete! Cleared ${clearedCount} cache directories.`);
console.log('💡 Tip: If you still see "Cannot read properties of null (reading \'useEffect\')" error:');
console.log('   1. Run: npm run clean:all');
console.log('   2. Run: npm install');
console.log('   3. Run: npm run dev');



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/scripts/deploy.js
================================================================================
#!/usr/bin/env node

/**
 * Automated Deployment Script
 * 
 * Handles the complete deployment workflow:
 * 1. Clears all caches
 * 2. Builds the application
 * 3. Deploys to Firebase
 * 4. Verifies deployment
 * 
 * Usage:
 *   npm run deploy          (deploy hosting only)
 *   npm run deploy:all      (deploy hosting + functions)
 */

import { execSync } from 'child_process';
import { existsSync, rmSync } from 'fs';
import { resolve } from 'path';

const ROOT_DIR = resolve(process.cwd());

function exec(command, options = {}) {
  console.log(`\n🔧 Running: ${command}\n`);
  try {
    execSync(command, {
      stdio: 'inherit',
      cwd: ROOT_DIR,
      ...options,
    });
    return true;
  } catch {
    console.error(`❌ Command failed: ${command}`);
    return false;
  }
}

function clearCaches() {
  console.log('\n🧹 Clearing all caches...\n');
  
  const cacheDirs = [
    'dist',
    'node_modules/.vite',
    '.vite',
    'node_modules/.cache',
  ];
  
  cacheDirs.forEach(dir => {
    const fullPath = resolve(ROOT_DIR, dir);
    if (existsSync(fullPath)) {
      console.log(`   Removing ${dir}...`);
      rmSync(fullPath, { recursive: true, force: true });
    }
  });
  
  console.log('✅ Caches cleared\n');
}

function build() {
  console.log('\n📦 Building application...\n');
  return exec('npm run build');
}

function deploy(target = 'hosting') {
  console.log(`\n🚀 Deploying to Firebase (${target})...\n`);
  return exec(`firebase deploy --only ${target}`);
}

function verifyDeployment() {
  console.log('\n✅ Deployment complete!\n');
  console.log('🌐 Your app is now live at:');
  console.log('   • https://neurafit-ai-2025.web.app');
  console.log('   • https://neurastack.ai\n');
  console.log('💡 Tips:');
  console.log('   • Clear browser cache or use incognito mode to see changes');
  console.log('   • Service worker will auto-update within 30 seconds');
  console.log('   • Check console for any errors\n');
}

function main() {
  const deployTarget = process.argv[2] || 'hosting';
  
  console.log('╔════════════════════════════════════════════════════════════╗');
  console.log('║         NeuraFit Automated Deployment Script              ║');
  console.log('╚════════════════════════════════════════════════════════════╝');
  
  // Step 1: Clear caches
  clearCaches();
  
  // Step 2: Build
  if (!build()) {
    console.error('\n❌ Build failed. Deployment aborted.\n');
    process.exit(1);
  }
  
  // Step 3: Deploy
  if (!deploy(deployTarget)) {
    console.error('\n❌ Deployment failed.\n');
    process.exit(1);
  }
  
  // Step 4: Verify
  verifyDeployment();
}

main();



================================================================================
FILE: /Users/salscrudato/Projects/neurafit/scripts/update-manifest-version.js
================================================================================
/**
 * Update Manifest Version Script
 * 
 * Updates manifest.json with current version and timestamp
 * for cache busting and version tracking.
 * 
 * Run this as part of the build process to ensure manifest
 * always reflects the current app version.
 */

import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

async function updateManifestVersion() {
  try {
    console.log('📝 Updating manifest.json version...');

    // Read package.json for version
    const packageJsonPath = join(rootDir, 'package.json');
    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf-8'));
    const appVersion = packageJson.version;

    // Read manifest.json
    const manifestPath = join(rootDir, 'public', 'manifest.json');
    const manifest = JSON.parse(readFileSync(manifestPath, 'utf-8'));

    // Update version fields
    const now = new Date();
    const timestamp = now.getTime();
    const isoTime = now.toISOString();

    manifest.version = appVersion;
    manifest.build_time = isoTime;
    manifest.cache_version = `v${appVersion}-${timestamp}`;

    // Write updated manifest
    writeFileSync(manifestPath, JSON.stringify(manifest, null, 2) + '\n');

    console.log(`✅ Manifest updated:`);
    console.log(`   Version: ${appVersion}`);
    console.log(`   Build Time: ${isoTime}`);
    console.log(`   Cache Version: ${manifest.cache_version}`);
  } catch (error) {
    console.error('❌ Error updating manifest:', error);
    process.exit(1);
  }
}

updateManifestVersion();



